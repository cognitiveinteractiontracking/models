<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="gui" default="true"/>
  <arg name="recording" default="false"/>
  <!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
       rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
       launch files, but it does nothing. -->
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="physics" default="ode"/>
  <arg name="verbose" default="true"/>
  <arg name="world_name" default="$(find twb_gazebo)/worlds/twb.world"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
  <arg name="respawn_gazebo" default="false"/>
  <arg name="use_clock_frequency" default="false"/>
  <arg name="pub_clock_frequency" default="100"/>
  <arg name="update_rate" default="50.0"/> <!-- (1/s) Update rate for tfs and gazebo plugins (not sensor updates) -->

  <!-- set use_sim_time flag -->
  <group if="$(arg use_sim_time)">
    <param name="/use_sim_time" value="true"/>
  </group>

  <!-- set command arguments -->
  <arg unless="$(arg paused)" name="command_arg1" value=""/>
  <arg if="$(arg paused)" name="command_arg1" value="-u"/>
  <arg unless="$(arg recording)" name="command_arg2" value=""/>
  <arg if="$(arg recording)" name="command_arg2" value="-r"/>
  <arg unless="$(arg verbose)" name="command_arg3" value=""/>
  <arg if="$(arg verbose)" name="command_arg3" value="--verbose"/>
  <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
  <arg if="$(arg debug)" name="script_type" value="debug"/>

  <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
        args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)"/>

  <!-- start gazebo client -->
  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
  </group>

  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find twb_gazebo)/config/twb_rviz.rviz"/>

  <!--load twb model-->
  <group ns="twb">
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find twb_gazebo)/urdf/twb.xacro'"/>

    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -model twb -param robot_description -x 0.0 -y 0.0 -z 0.0 -R 0 -P 0 -Y 0"/>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="$(arg update_rate)"/>
      <param name="robot_description" type="string" value="robot_description"/>
    </node>
  </group>


  <!--load camera model-->
  <group ns="cameras">
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find twb_gazebo)/urdf/cameras.xacro'"/>

    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -model cameras -param robot_description -x 0.0 -y 0.0 -z 0.0 -R 0 -P 0 -Y 0"/>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="$(arg update_rate)"/>
      <param name="robot_description" type="string" value="robot_description"/>
    </node>
  </group>

</launch>